def printMatrix(m):
    for i in range(len(m)):
        for j in range(len(m[0])):
            print(m[i][j], end="\t")
        print()

def numIslands(grid):
    m = len(grid)
    n = len(grid[0])
    visited = [[False for i in range(n)] for j in range(m)]
    illes = 0
    for i in range(m):
        for j in range(n):
            if grid[i][j] == "0" or visited[i][j]:
                continue
            queue = [(i,j)]
            visited[i][j] = True
            illes += 1
            while len(queue) > 0:
                (x,y) = queue.pop(0)
                if y > 0 and grid[x][y-1] == "1" and not visited[x][y-1]:
                    queue.append((x,y-1))
                    visited[x][y-1] = True
                if y < n-1 and grid[x][y+1] == "1" and not visited[x][y+1]:
                    queue.append((x,y+1))
                    visited[x][y+1] = True
                if x > 0 and grid[x-1][y] == "1" and not visited[x-1][y]:
                    queue.append((x-1,y))
                    visited[x-1][y] = True
                if x < m-1 and grid[x+1][y] == "1" and not visited[x+1][y]:
                    queue.append((x+1,y))
                    visited[x+1][y] = True
    return illes

grid = [
    ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","0","0"]]
print(numIslands(grid))

grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]]
print(numIslands(grid))

grid = [["1"]]
print(numIslands(grid))

grid = [["0","1","0"],["1","0","1"],["0","1","0"]]
print(numIslands(grid))

grid = [
["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
print(numIslands(grid))